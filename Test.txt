

1. В Python переменная должна быть объявлена до того, как ей будет присвоено значение
* True
* +False
2. Выберите правильное объявление переменной:
* x := 100
* x ← 100
* let x = 100
* +x = 100
3. В Python переменная может иметь сначала один тип, а затем другой
* +True
* False
4. На картинке представлена программа. Сколько создано объектов и ссылок?
* +Один объект, две ссылки
* Два объекта, одна ссылка
* Один объект, одна ссылка
* Два объекта, две ссылки
5. Какая встроенная функция возвращает уникальный номер, присвоенный объекту?
* ref()
* identity()
* refnum()
* +id()
6. Ниже представлен список имен переменных. Какие из них корректны?
* ver1.3
* return
* 4square
* +route66
7. Ниже представлены утверждения о списках. Какие из них верны?
* +Один и тот же объект может появляться в списке несколько раз
* +Размеры списка четко не определены
* Эти два списка одинаковы: ['a', 'b', 'c']  ['c', 'a', 'b']
* Все элементы в списке должны быть одного типа
* В списке может содержаться любой тип данных, кроме других списков
8. Допустим, объявлен список — x = [10, [3.141, 20, [30, 'baz', 2.718]], 'foo'].Как можно получить доступ к ‘z’?
* x[1][2][1]
* +x[1][2][1][2]
* x[4]
* x[4][2]
9. Объявлен кортеж — t = ('foo', 'bar', 'baz').Ниже представлены варианты изменения ‘bar’ на ‘qux’. Какой вариант верный?
* +Вопрос с подвохом — кортежи неизменяемы
* t[1:1] = 'qux'
* t(1) = 'qux'
* t[1] = 'qux'
10. Что выведет данный код?
* 2
* -5
* 5
* +Ошибку
11. Что выведет данный код?
* +10.0
* 10
* 100
* Ошибку
12. Что выведет данный код?
* +True
* False
* 0
* Ошибку
13. Что выведет данный код?
* 1
* 2-1
* -3
* +Ошибку
14. Для преобразования данных в число используется функция:
* string()
* print()
* input()
* +int()
15. Цикл – это:
* +последовательность, которая выполняется больше одного раза
* последовательность, которая выполняется один раз
* переменная, которая идет до конца исходного кода
16. Что выведет данный код?
* 15
* 5
* +0
* Ошибку
17. Что выведет данный код?
* hheelllloo wwoorrlldd
* hheelloo wwoorrlldd
* hello world
* +Ошибку
18. Что выведет данный код?
* s-t-t-
* s-t-r
* s-t-r-
* +js-t-t
19. Что выведет данный код?
* +0
* a
* hello world
* Ошибку
20. Что выведет данный код?
* one
* other
* 1
* +Ошибку
21. Что выведет данный код?
* +true
* false
* Ошибку
* Ничего
22. Что выведет данный код?
* +t
* f
* Ошибку
* Ничего
23. Что выведет данный код?
* +2.0
* 2
* Ошибку
* Ничего
24. C помощью какого ключевого слова можно создать функцию?
* +def
* import
* while
* if
25. С помощью какого ключевого слова можно вернуть значение из функции в основную программу?
* +return
* break
* def
* continue
26. Функция это:
* проверка определенного условия с результатом True или False
* +фрагменты кода для выполнения определенных команд
* повторение одних и тех же команд
* ячейка памяти компьютера, куда можно сохранять данные
27. Каким ключевым словом обозначается анонимная функция?
* +lambda
* alpha
* anonym
* Таких функций не существует
28. Что выведется в результате выполнения кода?
* 5
* 4
* +7
* 6
29. Для чего нужно ключевое слово global?
* Чтобы сделать переменную доступной из любой точки мира
* Чтобы указать, что эта переменная имеет самое важное значение в программе
* Такого ключевого слова нет, мы достали его из языка C++
* +Чтобы переменную можно было изменять за пределами текущей области видимости
30. Что такое рекурсивная функция?
* Функция, которая курсирует между модулями
* +Функция которая возвращает саму себя
* Функция, которая выполняется с последней строки по первую
* Функция, написанная курсивом
31. Чем полезны лямбда-выражения? Выберите верные утверждения:
* Лямбда-выражения ВСЕГДА упрощают чтение кода.
* +Лямбда-выражения — быстрые, однострочные одноразовые функции.
* +Лямбда-выражения используются в качестве аргументов функций и для выполнения быстрых вычислений.
* +Лямбда-выражения используются в функциональном программировании.
32. Какие методы чаще всего используются в лямбда-выражениях?
* +map()
* +filter()
* +reduce()
* lookup()
33. Что относится к основным принципам ООП?
* +Инкапсуляция, полиморфизм, наследование, абстракция
* Инкапсуляция, полиморфизм, делегирование, абстракция
* Полиморфизм, разделение интерфейса, наследование, абстракция
* Инкапсуляция, наследование, абстракция, открытость/закрытость
34. Что будет выведено на экран?
* 0
* False
* +None
* Ошибка
35. Какой принцип ООП описывает следующее предложение? Этот принцип является способностью использовать общий интерфейс для нескольких форм (типов данных).
* Инкапсуляция
* +Полиморфизм
* Абстракция
* Наследование
36. Какой из перечисленных вариантов является верным объявлением private поля?
* private field = 0
* field = 0
* _field = 0
* +__field = 0
37. Как создать конструктор класса А?
* А(параметры конструктора)
* +def __init__(параметры конструктора)
* def __A__(параметры конструктора)
* def init(параметры конструктора)
38. Как много конструкторов в классе может иметь Python?
* 0, в них нет необходимости
* +1, в Python можно создать лишь один конструктор
* 2, почему бы и нет?!
* Бесконечно много
39. Что будет выведено на экран?
* Это родительский класс Test
* +Это дочерний класс Test2
* SyntaxError: invalid syntax
* Это родительский класс Test Это дочерний класс Test2
40. Какой параметр обязательно принимает в себя метод экземпляра?
* тип объекта
* +сам экземпляр объекта
* название класса
* таких аргументов нет
41. Что выведет данный код?
* +8
* 0
* None
* Ошибку
42. В чем суть наследования?
* Во внедрении других объектов в объект контейнера и их активизации для реализации методов контейнера
* +В отношении между суперклассами и подклассами. Первые определяют поведение, а вторые могут наследовать и настраивать его
* Во внедрении других объектов, которым передают запросы на операции объекты контроллеров
43. Деструктор класса задается методом с именем:
* +__del__ 
* __delete__ 
* __destr__ 
* __destruct__