Переменные
1)Как обозначаются переменные в PHP?
1. +$имя_переменной;
2. @имя_переменной;
3. имя_переменной$;
4. Тип_переменной : имя_переменной;


2) Как присвоить переменной a значение 5?
1. int a=5;
2. int $a=5;
3. +$a=5;
4. @a = 5;


3)Укажите верно заданное имя:
1. $my-Var;
2. @myVar;
3. Int my_Var;
4. +$my_Var;


4)Что выведет на экран данный код: $var = “FOO”; $Var = “foo”; echo $var;
1. “foo”
2. “FOOfoo”
3. “fooFOO”
4. +“FOO”


5)Переменной $a было задано значение 5, затем объявлена переменная $b=&amp;$a, после чего $b была приравнена к 10. Чему равны переменные $a и $b?
1. 5, 10
2. 5, 5
3. +10, 10
4. 10, 5


6)Что выведет на экран данный код: $var=null; echo isset($var); $var = “foo”;
1. “foo”
2. Null
3. +false
4. true


7)Что выведет на экран данный код: $a = 'hello'; $$a = 'world'; echo ‘$a ${$a}’ ;
1. Ошибка
2. hello $a
3. hello hello 
4. +hello world


8)Что выведет на экран данный код:  $a = 'hello'; $$a = 'world'; echo “$a $hello”;
1. Ошибка
2. hello $hello
3. world world
4. +hello world


9)Для чего используется ключевое слово global?
1. Для подключения библиотек из глобального каталога
2. Для указания того, что переменная будет многократно использоваться
3. +Для получения доступа к глобальной переменной, которая находится внутри функции
4. Для объявления констант


10) Каждый php-оператор должен заканчиваться:
1. Знаки препинания в php не используются
2. Знаком доллара
3. +Точкой с запятой
4. Точкой










































Условные операторы
1) Какие условные операторы есть в php?
1. if
2. else
3. else if
4. +все вышеупомянутые


2) Как пишутся условные операторы в php?
1. оператор [выражение] [инструкция]
2. оператор выражение: инструкция
3. +оператор (выражение){инструкция}
4. оператор {выражение} (инструкция)


3) Каким должен быть результат выражения для оператора if?
1. Integer
2. String
3. Array
4. +Boolean


4)   Что будет выведено на экран в результате выполнения этого кода?
1. +if
2. else
3. if else
4. else if


5)   Что будет выведено на экран в результате выполнения этого кода?
1. if
2. else
3. if else
4. +else if








6) В чем разница между $a==$b и $a===$b?
1. +$a==$b возвращает TRUE, если $a и $b равны после преобразования типов, а $a===$b - если обе переменные имеют одинаковый тип изначально
2. $a==$b сравнивает переменные, а $a===$b - приравнивает
3. Действие $a===$b невозможно, оператора === не существует
4. Оба варианта полностью идентичны, операторы сравнения


7)   Каким будет результат выполнения данного кода?
1. 1
2. +0
3. 10
4. 01


8 ) В каких случаях можно не ставить фигурные скобки для оператора if?
1. Если выражение равна false
2. Если выражение равна true
3. +Если выполняемый код оператора if всего одна строка
4. Если выполняемый код оператора if занимает всю страницу и за ним не пишется код


9) Что означают два символа амперсанда ( && ) ?
1. +Логический И
2. Логический ИЛИ
3. Ничего
4. true


10) Что означают два символа прямой черты ( || ) ?
1. Логический И
2. +Логический ИЛИ
3. Ничего
4. false
Циклы
1) Цикл while выполняется пока … :
1. +Выражение равна true
2. Выражение равна false
3. Выражение равна null
4. Все выше перечисленные


2) Отличие do-while от while  
1. Выполняется если выражение равна true
2. +Результат выражения проверяется в конце
3. Результат выражения проверяется в начале
4. Выполняется пока не встретится оператор break


3) Правильная структура цикла for?
1. for{}(выр1;выр2;выр3)
2. for(){выр1;выр2;выр3}
3. +for(выр1;выр2;выр3){}
4. (выр1;выр2;выр3)for{}


4) Сколько раз выполняется первое выражение цикла for?
1. Выполняется с каждой итерацией
2. Выполняется один раз за каждые два итерации
3. Никогда не выполняется
4. +Один раз


5) Для чего используется цикл foreach ?
1. +Для перебора массивов и объектов
2. Для перебора каждой буквы строки
3. Точно так же как и цикл for
4. Точно так же как и цикл while


6) Что принимает цикл foreach в качестве аргумента?
1. Integer
2. String
3. +Array, Object
4. null


7) Что делает оператор break?
1. Разделить строку
2. +Остановка выполняемой структуры
3. Переход на следующую строку
4. Остановка на 1 секунду


8) Что делает оператор continue?
1. Переход на следующую строку
2. +Пропуск оставшейся части текущей итерации цикла
3. Остановка текущей итерации цикла
4. Пропуск следующей итерации


9) Когда выполняется первое выражение цикла for ?
1. +В начале цикла
2. В конце цикла
3. В начале каждой итерации
4. В конце каждой итерации


10) Сколько раз выполняется второе выражение цикла for ?
1. Выполняется всего один раз
2. +Выполняется с каждой итерацией
3. Выполняется в конце цикла один раз
4. Выполняется в начале цикла один раз


11) Какая из этих конструкций не относится к циклам?
1. while
2. foreach
3. +isset
4. for










































Массивы
1)Как создается пустой массив?
1. massive()
2. integer()
3. string
4. +array()


2) Как получить количество элементов в массиве?
1. +count() или sizeOf()
2. array.getsize()
3. array.size()
4. sizeOfArray(array)


3) Как получить ключ и значение из массива методом foreach?
1. $key.getvalue()
2. $key, $value
3. +$key=>$value
4. $value.getKey()


4) Как добавить новый элемент в конец массива без указания ключа?
1. array_insert()
2. +array_push()
3. array_pushValue()
4. array_pushWithoutKey()


5) Укажите правильное добавление нового элемента($value) в массив с указанием ключа($key)?
1. array_insertWithKey($key, $value)
2. +array[$key]=$value
3. array.insert($key, $value)
4. insert($array, $key, $value)


6)Как получить значение из массива указав ключ?
1. array.get($key)
2. array.getValue($key)
3. +array[$key]
4. array($key)


7)Как удалить последний элемент из массива?
1. +array_pop()
2. array_deleteLast()
3. array_removLast()
4. array_last.remove()


8) Укажите правильное добавление нового элемента($value) в массив с указанием ключа($key)?
1. +array($key => $value)
2. array.add($key, $value)
3. array.add($key = $value)
4. array.insert($key, $value)


9) С какого числа начинается индексация массивов по умолчанию?
1. 1
2. +0
3. -1
4. Нет правильного ответа


10) Каким методом проверить является ли переменная массивом?
1. is_massive()
2. isArray()
3. +is_array()
4. isarray()


















































Двумерные массивы
1) Как создаются двумерные или многомерные массивы,
1. create_multi_array()
2. array().createArray()
3. +array(array())
4. array(createArray())


2) Как получить элемент внутри двумерного массива?
1. +Используя синтаксис $array[index][индекс]
2. Используя синтаксис $array[index, индекс]
3. Используя синтаксис $array{index}{индекс}
4. 5. Используя синтаксис $array(index)(индекс)
3) Что такое многомерный массив в PHP?
1. Массив, содержащий только числа
2. Массив, содержащий только строки
3. +Массив, содержащий массивы
4. Массив, содержащий объекты


4)Как вы можете получить доступ к значению определенного элемента в многомерном массиве?
1. +Использование ключа элемента
2. Использование индекса элемента
3. Использование значения элемента
4. Использование положения элемента


5)Как вы можете создать многомерный массив в PHP?
1. Использование функции array()
2. Использование оператора []
3. +1,2 варианты
4. Нет правильного ответа


6)Как вы можете удалить элемент из многомерного массива в PHP?
1. +С помощью функции unset()
2. С помощью функции array_pop()
3. С помощью функции array_shift()
4. С помощью функции array_remove()


7)Можете ли вы сохранить строковое значение в ключе многомерного массива в PHP?
1. Нет, ключи должны быть цифровыми
2. Да, ключи должны быть строками
3. +Да, ключи могут быть как числовыми, так и строковыми
4. Нет правильного ответа на вопрос


8)   Что будет выведено на экран в результате этого кода?
1. Apple
2. Banana
3. +Mango
4. Kiwi


9)   Что будет выведено на экран в результате этого кода?
1. Orange
2. Apple
3. Ошибка
4. +Null


10)   Что будет выведено на экран в результате этого кода?
1. Array to string conversion (Ошибка)
2. +Undefined array key(Ошибка)
3. [“value”, “second_value”]
4. “some_string”


Строки
1)Какая функция PHP используется для объединения двух или более строк?
1. concat()
2. join()
3. merge()
4.  +. 


2)Как вы получаете доступ к определенному символу в строке в PHP?
1. charAt()
2. getChar()
3. +string[index]
4. $string{index}


3)Какая функция PHP используется для преобразования строки в верхний регистр?
1. upper()
2. toUpper()
3. +strtoupper()
4. uppercase()


4)Какая функция PHP используется для преобразования строки в нижний регистр?
1. +strtolower()
2. lower()
3. toLower()
4. lowercase()


5)Какая функция PHP используется для поиска определенной подстроки в строке?
1. find()
2. search()
3. locate()
4. +strpos()


6)Какая функция PHP используется для разделения строки на массив на основе указанного разделителя?
1. split()
2. +explode()
3. breakUp()
4. separate()


7)Какая функция PHP используется для обрезки пробелов в начале и конце строки?
1. +trim(
2. clean()
3. strip()
4. erase()


8) Как выглядит символы перехода на новую строку?
1. /b
2. /n
3. +\n
4. \L


9)  Что будет выведено на экран в результате выполнения этого кода?
1. Hello .  . world
2. Hello .. world
3. +Hello world
4. Hello     world


10) Как вставить значение переменной внутрь строки?
1. “some text ${ $var }”
2. “some text [$var]”
3. “some text $var”
4. +“some text {$var}”










































Типы данных
1)Может ли строка использоваться в качестве boolean значения в PHP?
1. True
2. False        
3. +Это зависит от строкового значения
4. Ничего из вышеперечисленного


2)Какой тип данных используется для представления числа с плавающей запятой в PHP?
1. int
2. +float
3. double
4. decimal


3)Каков результат следующего кода: $a = 10.5; echo gettype($a);
1. string
2. integer
3. +float
4. boolean


4)Можно ли использовать массивы в качестве типа данных в PHP?
1. +Да
2. Нет
3. Это зависит от контекста
4. Ничего из вышеперечисленного


5)Как вы проверяете, имеет ли значение тип null в PHP?
1. +is_null($value)
2. !isset($value)
3. empty($value)
4. $value == null


6)Какой тип данных возвращается функцией strval() в PHP?
1. +string
2. integer
3. float
4. boolean


7)Какой тип данных возвращается функцией is_array() в PHP?
1. string
2. integer
3. float
4. +boolean
8)Каков результат следующего кода: $a = “123”; echo intval($a);
1. +123
2. 123abc
3. 0
4. Ошибка


9)Какой тип данных возвращается функцией is_bool() в PHP?
1. string
2. integer
3. float
4. +boolean


10)    Что выведется на экран в результате выполнения этого кода?
1. 1515
2. +30
3. 15
4. Ошибка


















































Типизация
1)Нужно ли указывать тип данных при создании переменной в PHP?
1. Да нужно всегда указывать какой тип данных будет использоваться
2. Нет, в php нельзя указывать тип данных
3. +Не обязательно указывать, только в некоторых случаях
4. Будет ошибка если не указать


2)Как преобразовать integer в string?
1. +intval()
2. getinteger()
3. toInt()
4. integer()


3)  Что будет выведено на экран в результате выполнения этого кода?
1. just_text
2. some_text
3. just_text some_text
4. +Ошибка


4)  Что означает вопросительный знак перед явно указанным типом данных?
1. Можно не указать переменную при вызове функции
2. Переменная может конвертирована в другие типы
3. +Переменная может иметь значение null
4. Нет правильного ответа


5)  Что мы получим в результате выполнения этого кода?
1. 25+25
2. 2525
3. +50
4. 25


6)  Что мы получим в результате выполнения этого кода?
1. +Ошибка
2. Hello Delta + 25
3. Hello Delta25
4. null


7) Какая типизация реализована в php?
1. Сильная
2. Слабая
3. Динамическая
4. +Слабая динамическая

8)Что такое типизация в php?
1. +Процесс объявления типа переменной
2. Процесс присвоения значения переменной
3. Процесс определения типа переменной
4. Процесс преобразования переменной в определенный тип данных


9)Каков результат следующего кода: $a = 10; $a=”string”; echo gettype($a);
   1. +string
   2. integer
   3. float
   4. boolean


10)В чем разница между слабой и строгой типизацией в PHP?
   1. Строгая типизация требует объявления переменных с определенным типом данных, в то время как слабая типизация позволяет динамически типизировать переменные.
   2. +Строгая типизация позволяет динамически типизировать переменные, в то время как слабая типизация требует, чтобы переменные объявлялись с определенным типом данных.
   3. Строгая типизация используется в языках со статической типизацией, тогда как слабая типизация используется в языках с динамической типизацией.
   4. Строгая типизация используется в языках с динамической типизацией, тогда как слабая типизация используется в языках со статической типизацией.




















Функциональное программирование
1) Что такое функциональное программирование в PHP?
   1. +Парадигма программирования, ориентированная на использование функций для преобразования данных и управления ими.
   2. Парадигма программирования, ориентированная на объектно-ориентированное программирование.
   3. Парадигма программирования, ориентированная на процедурное программирование.
   4. Парадигма программирования, ориентированная на программирование, управляемое событиями.


2) Что такое чистая функция в PHP?
   1. Функция, которая изменяет свои входные данные
   2. Функция, зависящая от внешних переменных
   3. +Функция, которая возвращает один и тот же результат для одних и тех же входных данных без побочных эффектов.
   4. Функция, которая возвращает случайный результат


3) Что такое анонимная функция в PHP?
   1. Функция которая вызывается из другого файла
   2. +Функции не имеющие определённых имён
   3. Интерфейсы
   4. Функция без аргументов


4) Что такое стрелочные функции в PHP?
   1. Интерфейсы
   2. Функция без тела
   3. +Упрощенная анонимная функция
   4. Глобальная функция


5)Какова цель композиции в функциональном программировании?
   1. +Объединение нескольких функций в одну более сложную функцию
   2. Чтобы разделить одну сложную функцию на несколько более простых функций
   3. Чтобы предотвратить объединение или разделение функций
   4. Чтобы функции можно было комбинировать или разделять случайным образом


6) В функциональном программировании все является … ?
   1. Переменными
   2. Массивами
   3. +Функциями
   4. null значениями




7) Какова цель функций высшего порядка в функциональном программировании?
   1. Чтобы функции не принимали другие функции в качестве аргументов или не возвращали функции в качестве результатов.
   2. +Разрешить функциям принимать другие функции в качестве аргументов или возвращать функции в качестве результатов
   3. Разрешить функциям принимать только скалярные значения в качестве аргументов или возвращать скалярные значения в качестве результатов.
   4. Чтобы функции не принимали только скалярные значения в качестве аргументов или не возвращали скалярные значения в качестве результатов.




8) К чему может быть присвоена функция?
   1. +Переменной
   2. Массиву
   3. Объекту
   4. Нет правильного ответа


9) Почему циклы while и for нетипичны для функционального программирования?
   1. Потому что мы можем все присвоить переменным
   2. +Потому что мы не приравниваем переменным значения кроме функции
   3. Циклы while и for можно использовать
   4. Нет правильного ответа


10)Какова цель неизменности в функциональном программировании?
   1. Чтобы позволить функциям изменять данные, которые они получают в качестве входных данных
   2. Чтобы функции не возвращали какой-либо результат
   3. Разрешить функциям возвращать любой результат
   4. +Чтобы функции не модифицировали данные, которые они получают в качестве входных данных




























Объектно-ориентированное программирование
1)Какова цель наследования в объектно-ориентированном программировании?
   1. Чтобы предотвратить повторное использование кода
   2. +Чтобы разрешить повторное использование кода
   3. Для реализации полиморфизма
   4. Для обеспечения инкапсуляции


2)Какова цель инкапсуляции в объектно-ориентированном программировании?
   1. Чтобы предотвратить повторное использование кода
   2. Чтобы разрешить повторное использование кода
   3. Для реализации полиморфизма
   4. +Чтобы скрыть детали реализации


3)Какова цель полиморфизма в объектно-ориентированном программировании?
   1. Чтобы предотвратить повторное использование кода
   2. Чтобы разрешить повторное использование кода
   3. +Чтобы объекты разных классов могли использоваться взаимозаменяемо
   4. Для обеспечения инкапсуляции


4)Какое ключевое слово используется для объявления класса в PHP?
   1. +class
   2. struct
   3. define
   4. object


5)Какое ключевое слово используется для объявления свойства в классе PHP?
   1. property
   2. +variable
   3. field
   4. var


6)Какое ключевое слово используется для объявления метода в классе PHP?
   1. +function
   2. method
   3. procedure
   4. subroutine


7)Каков синтаксис для создания объекта класса в PHP?
   1. +object = new ClassName();
   2. class = new ClassName();
   3. class ClassName();
   4. new ClassName();


8)Как вы можете получить доступ к свойству объекта в PHP?
   1. object.property
   2. +object->property
   3. object:property
   4. object[property]


9)Как вы можете получить доступ к методу объекта в PHP?
   1. object.method()
   2. object:method()
   3. object().method
   4. +object->method()


10)Какова цель метода __construct() в PHP?
   1. уничтожить предмет
   2. +Инициализировать объект
   3. Перегрузить объект
   4. Чтобы расширить объект


11)Какова цель метода __destruct() в PHP?
   1. +уничтожить предмет
   2. Инициализировать объект
   3. Перегрузить объект
   4. Чтобы расширить объект




12)Какова цель родительского ключевого слова в PHP?
   1. Для доступа к дочернему классу
   2. Для доступа к текущему классу
   3. +Для доступа к родительскому классу
   4. Для доступа к базовому классу


13)Какова цель ключевого слова self в PHP?
   1. Для доступа к родительскому классу
   2. Для доступа к дочернему классу
   3. +Для доступа к текущему классу
   4. Для доступа к базовому классу












14)Какова цель статического ключевого слова в PHP?
   1. Сделать свойство или метод принадлежащим объекту
   2. +Чтобы сделать свойство или метод принадлежащим классу
   3. Чтобы сделать свойство или метод принадлежащим пространству имен
   4. Сделать свойство или метод принадлежащим пакету




15)Какова цель ключевого слова final в PHP?
   1. Чтобы разрешить переопределение метода
   2. +Чтобы предотвратить переопределение метода
   3. Разрешить наследование класса
   4. Чтобы предотвратить наследование класса